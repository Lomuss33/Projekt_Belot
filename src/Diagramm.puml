@startuml
left to right direction

class Game {
    ' Attributes
    + Difficulty difficulty : Game difficulty level
    + Deck deck : The deck of cards used in the game
    + List<Player> players : List of players in the game
    + Card.Suit trumpSuit : Current trump suit for the game
    + Stack<GameState> gameStates : Stack to store game states for undo
    + int dealerIndex : Index of the dealer
    + Team team1 : Home team
    + Team team2 : Away team
    + ZvanjeService zvanjeService : Service for detecting Zvanje

    ---
    ' Constructor
    + Game() : Initializes a new game

    ---
    ' Void Methods
    + void startGame() : Starts the game
    + void startRound() : Starts a round
    + void initializePlayers() : Initializes human and AI players
    + void makeMove(int playerIndex, int cardIndex) : Makes a move in the game
    + void undo() : Undo the last move
    + void updateCardValues(Card.Suit trumpSuit) : Updates card values based on trump
    + void chooseDifficulty(Difficulty difficulty) : Sets the game difficulty
    + void nextDealer() : Moves to the next dealer
    + void saveGameState() : Saves the current game state

    ---
    ' Non-void Methods
    + int getStartingPlayerIndex() : Returns the starting player index
    + int calculateZvanjePoints(Player player, Card.Suit trumpSuit) : Calculates Zvanje points
    + Card.Suit chooseTrumpSuit() : Chooses the trump suit
    + List<Integer> getPlayableCardIndexes(List<Card>, List<Card>, Card.Suit) : Gets playable card indexes
    + Team determineAndAnnounceZvanje() : Determines and announces Zvanje winner
    + Team getPlayerTeam(Player player) : Gets the player's team
    + static Card getStrongestCard(List<Card>, Card.Suit, Card.Suit) : Gets the strongest card
    + static List<Integer> getAllCardIndices(int) : Gets all card indices
}

class Team {
    ' Attributes
    + String name : Team name
    + List<Player> players : List of players in the team
    + int score : Total score for the team
    + int wins : Total wins for the team

    ---
    ' Constructor
    + Team(String name) : Initializes a team with a name

    ---
    ' Void Methods
    + void addPlayer(Player player) : Adds a player to the team
    + void addScore(int points) : Updates the team score
    + void addWin() : Increments the team's win count

    ---
    ' Non-void Methods
    + int getScore() : Returns the team score
    + int getWins() : Returns the team's win count
}

class Player {
    ' Attributes
    + String name : Player's name
    + Hand hand : Player's hand of cards

    ---
    ' Constructor
    + Player(String name) : Initializes a player

    ---
    ' Abstract Methods
    + abstract int chooseCardToPlay(List<Integer>) : Chooses a card to play
    + abstract Card.Suit chooseTrump() : Chooses a trump suit
    + abstract List<Card> callZvanje(List<Integer>) : Calls a Zvanje
    + abstract void callDama() : Calls "Dama"

    ---
    ' Non-void Methods
    + Card playCard(int index) : Plays a card from the hand
    + String getName() : Returns the player's name
    + Hand getHand() : Returns the player's hand

    ---
    ' Void Methods
    + void displayHand() : Displays the player's hand
}

class AiPlayerEasy {
    ---
    ' Constructor
    + AiPlayerEasy(String name) : Initializes an easy AI player

    ---
    ' Override Methods
    + int chooseCardToPlay(List<Integer>) : Randomly selects a playable card
    + Card.Suit chooseTrump() : Randomly chooses a trump suit
    + List<Card> callZvanje(List<Integer>) : Calls Zvanje (basic logic)
    + void callDama() : Calls Dama if possible
}

class AiPlayerNormal {
    ---
    ' Constructor
    + AiPlayerNormal(String name) : Initializes a normal AI player

    ---
    ' Override Methods
    + int chooseCardToPlay(List<Integer>) : Selects a playable card with moderate strategy
    + Card.Suit chooseTrump() : Selects a trump suit
    + List<Card> callZvanje(List<Integer>) : Calls Zvanje (improved logic)
    + void callDama() : Calls Dama if possible
}

class AiPlayerHard {
    ---
    ' Constructor
    + AiPlayerHard(String name) : Initializes a hard AI player

    ---
    ' Override Methods
    + int chooseCardToPlay(List<Integer>) : Selects a card with advanced strategy
    + Card.Suit chooseTrump() : Selects a trump suit
    + List<Card> callZvanje(List<Integer>) : Calls Zvanje (complex logic)
    + void callDama() : Calls Dama if possible
}

class HumanPlayer {
    ---
    ' Constructor
    + HumanPlayer(String name) : Initializes a human player

    ---
    ' Override Methods
    + int chooseCardToPlay(List<Integer>) : Allows the player to select a card
    + Card.Suit chooseTrump() : Allows the player to select a trump suit
    + List<Card> callZvanje(List<Integer>) : Calls Zvanje based on player input
    + void callDama() : Calls Dama if possible
}

class Card {
    ' Attributes
    + Suit suit : Suit of the card
    + Rank rank : Rank of the card
    + int value : Value of the card

    ---
    ' Constructor
    + Card(Suit suit, Rank rank) : Initializes a card

    ---
    ' Void Methods
    + void calculateValue(Suit trumpSuit) : Calculates card value based on trump

    ---
    ' Non-void Methods
    + int getStrength(Suit trumpSuit, Suit leadSuit) : Calculates card strength
    + Suit getSuit() : Returns the card's suit
    + Rank getRank() : Returns the card's rank
    + int getValue() : Returns the card's value
}

class Deck {
    ' Attributes
    + List<Card> cards : The list of cards in the deck

    ---
    ' Constructor
    + Deck() : Initializes a full deck of cards

    ---
    ' Void Methods
    + void shuffle() : Shuffles the deck
    + void reset() : Resets the deck to its initial state
    + void dealCards(Player player, int count) : Deals a specific number of cards
    + void dealHands(List<Player>, int cardsPerPlayer) : Deals cards to all players
    + void setCards(List<Card>) : Sets the deck state

    ---
    ' Non-void Methods
    + List<Card> getCards() : Returns the current state of the deck
}

class Hand {
    ' Attributes
    + List<Card> cards : Cards in the player's hand

    ---
    ' Constructor
    + Hand() : Initializes an empty hand

    ---
    ' Void Methods
    + void addCards(List<Card>) : Adds cards to the hand
    + void removeCard(int index) : Removes a card from the hand
    + void setCards(List<Card>) : Sets cards in the hand

    ---
    ' Non-void Methods
    + Card getCard(int index) : Gets a card by index
    + List<Card> getCards() : Returns all cards in the hand
}

class ZvanjeService {
    ---
    ' Non-void Methods
    + List<ZvanjeType> detectZvanje(Player player, Card.Suit trumpSuit) : Detects Zvanje combinations
    + Map<String, Object> determineZvanje(List<Player>, Team, Team, Card.Suit) : Determines Zvanje results
}

class GameState {
    ---
    ' Attributes
    + List<Card> deckState : The current state of the deck
    + List<List<Card>> handsState : The current state of players' hands

    ---
    ' Constructor
    + GameState(List<Card>, List<List<Card>>) : Initializes a game state
}

' Relationships
Game "1" -- "1..2" Team : involves
Game "1" -- "1" Deck : uses
Game "1" -- "1..*" Player : involves
Game "1" -- "1" ZvanjeService : uses
Game "1" -- "1..*" GameState : saves
Player "1" -- "1" Hand : owns
Deck "1" -- "0..*" Card : contains
Hand "1" -- "0..*" Card : contains
Player <|-- HumanPlayer
Player <|-- AiPlayerEasy
Player <|-- AiPlayerNormal
Player <|-- AiPlayerHard
@enduml
