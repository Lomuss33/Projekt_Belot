@startuml
left to right direction

class Match {
    ' Attributes
    + Team team1 : The first team
    + Team team2 : The second team
    + List<Player> players : The list of players in the match
    + int dealerIndex : Index of the dealer
    + static int WINNING_SCORE : The score needed to win the match
    + Team winner : The winning team

    ---
    ' Constructor
    + Match(Difficulty difficulty) : Initializes a new match

    ---
    ' Void Methods
    + void startMatch() : Starts the match
    + void rotateDealer() : Rotates the dealer
    + void handleMatchEnd(Team winner) : Handles post-match actions

    ---
    ' Non-void Methods
    + Team matchWinner() : Determines the winning team of the match
}

class Game {
    ' Attributes
    + Team team1 : The first team
    + Team team2 : The second team
    + List<Player> players : The list of players
    + ZvanjeResult zvanjeWin : Winning Zvanje result
    + int winThreshold : The points needed to win
    + Deck deck : The deck used in the game
    + Card.Suit trumpSuit : The trump suit for the game
    + int dealerIndex : Index of the dealer

    ---
    ' Constructor
    + Game(List<Player>, Team, Team, int) : Initializes a new game

    ---
    ' Void Methods
    + void startGame() : Starts the game
    + void initializeGame() : Initializes the game state
    + void playRounds() : Plays rounds in the game
    + void awardGameVictory() : Awards points to the winning team
    + void updateCardValues(Card.Suit trumpSuit) : Updates card values based on trump
    + static void sortAllPlayersHands(List<Player>) : Sorts all players' hands

    ---
    ' Non-void Methods
    + Team lookForWinner() : Determines the winning team of the game
    + Card.Suit chooseTrumpSuit(int) : Allows players to choose the trump suit
    + ZvanjeResult reportZvanje(Card.Suit, int) : Reports Zvanje results
    + int calculateTotalZvanjePoints(Team, List<ZvanjeResult>) : Calculates Zvanje points for a team
}

class Round {
    ' Attributes
    + List<Player> players : The list of players
    + Card.Suit trumpSuit : The trump suit for the game
    + int startingPlayerIndex : The index of the starting player
    + List<Card> onFloorCards : Cards played on the floor in the round

    ---
    ' Constructor
    + Round(List<Player>, int, Card.Suit) : Initializes a new round

    ---
    ' Void Methods
    + void playTurns(int) : Plays the turns for the round

    ---
    ' Non-void Methods
    + int start(int) : Starts the round and returns the next starting player
    + Player returnWinner(int) : Determines the round winner
}

class Card {
    ' Attributes
    + Card.Suit suit : The suit of the card
    + Card.Rank rank : The rank of the card
    + int value : The value of the card

    ---
    ' Constructor
    + Card(Card.Suit, Card.Rank) : Initializes a card

    ---
    ' Void Methods
    + void calculateValue(Card.Suit trumpSuit) : Calculates the card's value

    ---
    ' Non-void Methods
    + Card.Suit getSuit() : Gets the card's suit
    + Card.Rank getRank() : Gets the card's rank
    + int getValue() : Gets the card's value
    + int getStrength(Card.Suit, Card.Suit) : Determines card strength
}

class Deck {
    ' Attributes
    + List<Card> cards : List of cards in the deck

    ---
    ' Constructor
    + Deck() : Initializes a full deck of cards

    ---
    ' Void Methods
    + void initializeDeck() : Initializes the deck
    + void shuffle() : Shuffles the deck
    + void dealHand(Player, int) : Deals cards to a player
    + void dealAllHands(List<Player>, int) : Deals cards to all players
    + void setCards(List<Card>) : Sets the state of the deck

    ---
    ' Non-void Methods
    + List<Card> getCards() : Gets the current state of the deck
}

class Player {
    ' Attributes
    + String name : The player's name
    + Hand hand : The player's hand of cards
    + Team team : The player's team

    ---
    ' Constructor
    + Player(String name, Team team) : Initializes a player

    ---
    ' Abstract Methods
    + abstract Card.Suit chooseTrump() : Chooses a trump suit
    + abstract List<Card> callZvanje(List<Integer>) : Calls Zvanje
    + abstract void callDama() : Calls Dama
    + abstract int chooseCardToPlay(List<Integer>) : Chooses a card to play

    ---
    ' Non-void Methods
    + Card playCard(int) : Plays a card
    + String getName() : Gets the player's name
    + Hand getHand() : Gets the player's hand
    + Team getTeam() : Gets the player's team
}

class Team {
    ' Attributes
    + String name : The team's name
    + List<Player> players : The players in the team
    + List<Card> wonCards : Cards won by the team
    + int bigs : The team's big score
    + int smalls : The team's small score

    ---
    ' Constructor
    + Team(String name) : Initializes a team

    ---
    ' Void Methods
    + void addPlayer(Player player) : Adds a player to the team
    + void addBigs(int points) : Adds points to the big score
    + void addSmalls(int points) : Adds points to the small score
    + void addWonCardsAsPoints(List<Card>) : Adds won cards as points
    + void resetWonCards() : Resets the team's won cards
    + void resetSmalls() : Resets the small score

    ---
    ' Non-void Methods
    + List<Player> getPlayers() : Gets the players in the team
    + int getBigs() : Gets the big score
    + int getSmalls() : Gets the small score
}

@enduml
